// Code generated by MockGen. DO NOT EDIT.
// Source: subcriber.go

// Package mock_sender is a generated GoMock package.
package mock_sender

import (
	context "context"
	reflect "reflect"

	internal "github.com/z-sector/otus-hw/hw12_13_14_15_calendar/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockUCSenderI is a mock of UCSenderI interface.
type MockUCSenderI struct {
	ctrl     *gomock.Controller
	recorder *MockUCSenderIMockRecorder
}

// MockUCSenderIMockRecorder is the mock recorder for MockUCSenderI.
type MockUCSenderIMockRecorder struct {
	mock *MockUCSenderI
}

// NewMockUCSenderI creates a new mock instance.
func NewMockUCSenderI(ctrl *gomock.Controller) *MockUCSenderI {
	mock := &MockUCSenderI{ctrl: ctrl}
	mock.recorder = &MockUCSenderIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUCSenderI) EXPECT() *MockUCSenderIMockRecorder {
	return m.recorder
}

// SetSentNotifyStatus mocks base method.
func (m *MockUCSenderI) SetSentNotifyStatus(ctx context.Context, notif internal.EventNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSentNotifyStatus", ctx, notif)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSentNotifyStatus indicates an expected call of SetSentNotifyStatus.
func (mr *MockUCSenderIMockRecorder) SetSentNotifyStatus(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSentNotifyStatus", reflect.TypeOf((*MockUCSenderI)(nil).SetSentNotifyStatus), ctx, notif)
}
