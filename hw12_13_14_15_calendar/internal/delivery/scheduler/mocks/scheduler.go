// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	context "context"
	reflect "reflect"

	internal "github.com/z-sector/otus-hw/hw12_13_14_15_calendar/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockSchedUCI is a mock of SchedUCI interface.
type MockSchedUCI struct {
	ctrl     *gomock.Controller
	recorder *MockSchedUCIMockRecorder
}

// MockSchedUCIMockRecorder is the mock recorder for MockSchedUCI.
type MockSchedUCIMockRecorder struct {
	mock *MockSchedUCI
}

// NewMockSchedUCI creates a new mock instance.
func NewMockSchedUCI(ctrl *gomock.Controller) *MockSchedUCI {
	mock := &MockSchedUCI{ctrl: ctrl}
	mock.recorder = &MockSchedUCIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedUCI) EXPECT() *MockSchedUCIMockRecorder {
	return m.recorder
}

// DeleteOldEvents mocks base method.
func (m *MockSchedUCI) DeleteOldEvents(ctx context.Context, days int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldEvents", ctx, days)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldEvents indicates an expected call of DeleteOldEvents.
func (mr *MockSchedUCIMockRecorder) DeleteOldEvents(ctx, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldEvents", reflect.TypeOf((*MockSchedUCI)(nil).DeleteOldEvents), ctx, days)
}

// GetEventNotifications mocks base method.
func (m *MockSchedUCI) GetEventNotifications(ctx context.Context) ([]internal.EventNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventNotifications", ctx)
	ret0, _ := ret[0].([]internal.EventNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventNotifications indicates an expected call of GetEventNotifications.
func (mr *MockSchedUCIMockRecorder) GetEventNotifications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventNotifications", reflect.TypeOf((*MockSchedUCI)(nil).GetEventNotifications), ctx)
}

// SetNotSentStatus mocks base method.
func (m *MockSchedUCI) SetNotSentStatus(ctx context.Context, notif internal.EventNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNotSentStatus", ctx, notif)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNotSentStatus indicates an expected call of SetNotSentStatus.
func (mr *MockSchedUCIMockRecorder) SetNotSentStatus(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotSentStatus", reflect.TypeOf((*MockSchedUCI)(nil).SetNotSentStatus), ctx, notif)
}

// SetProcessingNotifyStatus mocks base method.
func (m *MockSchedUCI) SetProcessingNotifyStatus(ctx context.Context, notif internal.EventNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessingNotifyStatus", ctx, notif)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessingNotifyStatus indicates an expected call of SetProcessingNotifyStatus.
func (mr *MockSchedUCIMockRecorder) SetProcessingNotifyStatus(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessingNotifyStatus", reflect.TypeOf((*MockSchedUCI)(nil).SetProcessingNotifyStatus), ctx, notif)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockProducer) Publish(ctx context.Context, notif internal.EventNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, notif)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockProducerMockRecorder) Publish(ctx, notif interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockProducer)(nil).Publish), ctx, notif)
}
